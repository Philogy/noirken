{
  "name": "PrivateCounter",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "initial_count",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_counter",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "increment",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "",
      "eJztmtuKIjEQht+lr0WSOqQSX2WZC9mdhYHBWVbvBt99PSVpnCJBlFgL440Kfzef1ekvf4Of0/vHz/Xu7WOznVafE02rH5/T9s96c/y23a3/7qaVW0yvm1+H9/1i+v32/jqt/H7xJeWRGC/Jw2fhkkbW4gSJcpxQZB5/WUxshiSYIREzJNEMSTJD4p0dFG8HBeygoB0UO6L1dkzr7ajW23GttyNbb8e2YMe2YMe2YMe2YMe2YMe2YMe2YMe2YMe2YMe2YMe2aMe2aMe2aMe2aMe2aMe2aMe2ONK2xFJQmPAaZaRtOygjbdtBGWnbNgqNtG0HZaRtOygjbdtBGWnbDspI23ZQRtq2g2LHtmTHtmTHtmTHtmzHtmzHtmzHtqza1ruQ8kEuchMoer5EY6hJ0WDA5RYHWDvcmUNV7RM4VM8+gUOV7C0cicoycc61QSTEzOywedZA/pIMHEsy4YlZtbFxZlXbxplVv9tmDupGMGc+vNri88glKzg//9cwY7YpY6hROKGoG8FNKCBVwS60UTy4UMJcuY9PscqwczZ6KFHSoiQ5SilVeZDqmXINwSWYz0Obcyg/DiS2ww2DBXWT+x7zo8fc3cD/izFzOS1z6Iw55ikjVAB2N86tWzi+56bOrVuQnje35DJECmk+tyN3t1CZ4Ba65u6Wqi434ewJILa5D0sjLxKuHSL4E0q3K41D6Vagh6JQrHWC5ijKeaXcOlLXIJ6updxfgp5BfX9fuoWaKdc8Frq67HJ/p2DIJdWL4zYKiCsrcOaTU4uU+/fdR6EEt1SlnMrQfe344VzHeanezER5j2A/u+fC2URL1aEA+SfDDO1yn8pS9VfnGJWtc4xqhNYxAkv9b4Xs8goMWC9hiPuX/f4fXbPJTA==",
      "",
      "eJztmstqIzEQRf+l18aoXnr4V4YszEwCgeAMY++M/z1+Seo4RQtjI9eAV3HgdvvktvqoBNkOH5+/l5v3z9V6WGwHGha/tsP673J1+G29Wf7bDAs3G15Xf/Y/d7Ph7f3jdVjAbvYjBcRC5+T+c5CSJtHijIlznCmEcfxlNrAZEjFD4s2QBDMk0QxJMkMCzg4K2EFBOyh2PAt2RAt2TAt2VAt2XAt2ZAt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bIt2bEt2bEt2bEt2bEt2bEt2bEt2bEs9bcsSCoowXaL0tG0DpadtGyg9bTuNwj1t20DpadsGSk/bNlB62raB0tO2DZSetm2g2LEt27Et27Et27Gt2LGt2LGt2LGtqLYFTK58h/OTQBHkHI2+wgQNBl2e4pDqDHfiUFX7AA7Vsw/gUCV7DUfiskycc9MgwcfM7Gjyrp7hnPQSSzLRkVm1sXFmVdvGmVW/22b26kbwjRkb4gPKLxZAoPH9f4aF8n2FahUJjyjqRnAVCgbSqlZRAJ0vYanch1OsUnbORsASZS3KIUc5pSoPVj1TniG6hOM+tJ59+eMwxOnwhMG8usk9a753ze0N/FnzHWpuzyf/Q81SbiviGzXH3DJhBRB3ZW/teerZm9Zbe/57WG/JpXM2+TTu7cDdngEtcAe+5G7PgS1uptFBK05z75dGXiRSDwkejijt8a4XSrh9arsGhWOd2niMotw3lFcn1DVIx2cZbh/wHkF9+7x0DbVwnqYl8OVjv32mEMxnAQhOplEwuLICRz45Duvh9n33XijezdXNLJXSoZL406nHz1WvMOc9QmD0zvmTieaq+xGzvXCEdlZGnKvebVyjsjWuUeU0dU2guf7fm+LyCvQE9aK4e9ntvgDj6Fqg"
    ],
    "fileMap": {
      "1": {
        "source": "contract PrivateCounter {\n    use dep::aztec::{\n        context::{Context},\n            note::{\n                note_header::NoteHeader,\n                utils as note_utils,\n            },\n            state_vars::map::Map,\n    };\n    use dep::value_note::{\n        balance_utils,\n            value_note::{\n                ValueNoteMethods,\n                VALUE_NOTE_LEN,\n            },\n    };\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n\n    struct Storage {\n        counts: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                counts: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        EasyPrivateUint::new(context, slot)\n                    },\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(initial_count: u120, owner: Field) {\n        let storage = Storage::init(Context::private(&mut context));\n        let counts = storage.counts;\n        counts.at(owner).add(initial_count, owner);\n    }\n\n    #[aztec(private)]\n    fn increment(owner: Field)  {\n        let storage = Storage::init(Context::private(&mut context));\n        let counts = storage.counts;\n        counts.at(owner).add(1, owner);\n    }\n\n    unconstrained fn get_counter(owner: Field) -> Field {\n        let storage = Storage::init(Context::none());\n        let counts = storage.counts;\n        balance_utils::get_balance(counts.at(owner).set)\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        preimage: [Field; VALUE_NOTE_LEN],\n    ) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/philogy/Documents/Aztec/second_token/src/contracts/src/main"
      },
      "5": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "17": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "18": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/abi"
      },
      "37": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\nfn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/address"
      },
      "40": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/context"
      },
      "42": {
        "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/log"
      },
      "47": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/note/lifecycle"
      },
      "48": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n    from_public: bool,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    // Check the note hash via oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, note);\n    let exists = oracle::notes::check_note_hash_exists(header.nonce, inner_note_hash);\n    assert(exists, \"Note hash does not exist.\");\n\n    let mut note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n    if from_public {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Should remove this once public kernel applies nonces.\n        note_hash_for_read_request = compute_siloed_note_hash(note_interface, note);\n    }\n    context.push_read_request(note_hash_for_read_request);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n        };\n    };\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/note/note_getter"
      },
      "50": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/note/note_hash"
      },
      "53": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n   fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/note/note_viewer_options"
      },
      "54": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/note/utils"
      },
      "61": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/oracle/get_public_key"
      },
      "62": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\nfn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/oracle/get_secret_key"
      },
      "63": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/oracle/rand"
      },
      "66": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(checkNoteHashExists)]\nfn check_note_hash_exists_oracle<N>(\n    _nonce: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn check_note_hash_exists(\n    nonce: Field,\n    inner_note_hash: Field,\n) -> bool {\n    check_note_hash_exists_oracle(nonce, inner_note_hash) == 1\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialize(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/oracle/notes"
      },
      "68": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/oracle/logs"
      },
      "75": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/state_vars/map"
      },
      "77": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{ensure_note_hash_exists, get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    fn insert(self, note: &mut Note) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // docs:start:assert_contains_and_remove\n    fn assert_contains_and_remove(self, note: &mut Note, nonce: Field) {\n        // Initialize header of note. Must be done before computing note hashes as it initializes the:\n        // - storage slot (used in inner note hash)\n        // - the contract address (used in siloed note hash)\n        // - and the nonce (used in the unique siloed note hash)\n        let context = self.context.private.unwrap();\n        let set_header = self.note_interface.set_header;\n        let note_header = NoteHeader{\n            contract_address: context.this_address(),\n            storage_slot: self.storage_slot,\n            nonce\n        };\n        set_header(note, note_header);\n\n        ensure_note_hash_exists(\n            context,\n            self.note_interface,\n            *note,\n            false,\n        );\n\n        destroy_note(\n            context,\n            *note,\n            self.note_interface,\n        );\n    }\n    // docs:end:assert_contains_and_remove\n\n    // docs:start:assert_contains_and_remove_publicly_created\n    // NOTE: this function should ONLY be used for PUBLICLY-CREATED note hashes!\n    // WARNING: function will be deprecated/removed eventually once public kernel applies nonces.\n    fn assert_contains_and_remove_publicly_created(self, note: &mut Note) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Should be real nonce (once public kernel applies nonces).\n        let nonce = 0;\n        let context = self.context.private.unwrap();\n        let set_header = self.note_interface.set_header;\n        let mut note_header = NoteHeader{\n            contract_address: context.this_address(),\n            storage_slot: self.storage_slot,\n            nonce\n        };\n        set_header(note, note_header);\n\n        ensure_note_hash_exists(\n            context,\n            self.note_interface,\n            *note,\n            true,\n        );\n\n        // Set the nonce to nonzero so that the nullifier is treated as persistable\n        // (non-transient) and so the private kernel does not attempt to match it to\n        // a pending noteHash/commitment and squash them.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): remove\n        // this hack once public kernel injects nonces.\n        note_header.nonce = 1;\n        set_header(note, note_header);\n\n        destroy_note(\n            context,\n            *note,\n            self.note_interface,\n        );\n    }\n    // docs:end:assert_contains_and_remove_publicly_created\n\n    // docs:start:remove\n    fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/state_vars/set"
      },
      "82": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/types/vec"
      },
      "88": {
        "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/aztec/src/utils"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    // docs:end:view_notes\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/value-note/src/balance_utils"
      },
      "92": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    fn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(preimage)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/value-note/src/value_note"
      },
      "93": {
        "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext, Context},\n    log::emit_encrypted_log,\n    note::note_getter_options::NoteGetterOptions,\n    oracle::get_public_key::get_public_key,\n    state_vars::set::Set,\n    types::point::Point,\n};\nuse dep::std::option::Option;\nuse dep::value_note::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n};\n\nstruct EasyPrivateUint {\n    context: Context,\n    set: Set<ValueNote, VALUE_NOTE_LEN>,\n    storage_slot: Field,\n}\n\nimpl EasyPrivateUint {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = Set {\n            context,\n            storage_slot,\n            note_interface: ValueNoteMethods,\n        };\n        EasyPrivateUint {\n            context,\n            set,\n            storage_slot,\n        }\n    }\n\n    // Very similar to `value_note::utils::increment`.\n    fn add(self, addend: u120, owner: Field) {\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note);\n        // docs:end:insert\n\n        // Emit the newly created encrypted note preimages via oracle calls.\n        let owner_key = get_public_key(owner);\n        let context = self.context.private.unwrap();\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            self.set.storage_slot,\n            owner_key,\n            addend_note.serialize(),\n        );\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    fn sub(self, subtrahend: u120, owner: Field) {\n        // docs:start:get_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let maybe_notes = self.set.get_notes(options);\n        // docs:end:get_notes\n\n        let mut minuend: u120 = 0;\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n\n                // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n                // spending someone else's notes).\n                assert(note.owner == owner);\n\n                // Removes the note from the owner's set of notes.\n                // docs:start:remove\n                self.set.remove(note);\n                // docs:end:remove\n\n                minuend += note.value as u120;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(&mut result_note);\n\n        // Emit the newly created encrypted note preimages via oracle calls.\n        let mut encrypted_data = [0; VALUE_NOTE_LEN];\n        if result_value != 0 {\n            encrypted_data = result_note.serialize();\n        };\n\n        let owner_key = get_public_key(owner);\n\n        let context = self.context.private.unwrap();\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            self.set.storage_slot,\n            owner_key,\n            encrypted_data,\n        );\n    }\n}\n",
        "path": "/Users/philogy/nargo/github.com/AztecProtocol/aztec-nrmaster/easy-private-state/src/easy_private_state"
      }
    }
  }
}